const fs         = require('fs'),
      path       = require('path'),
      decamelize = require('decamelize'),
      vdf        = require('vdf'),
      App        = require('../Entity/App'),
      Depot      = require('../Entity/Depot');

class AppRepository
{
    constructor ()
    {
        this._base_dir = path.resolve(path.join(__rootdir, 'output'));
    }

    findByAppID (app_id)
    {
        if (!fs.existsSync(path.join(this._base_dir, app_id))) {
            throw new Error(`App not found with id [${app_id}]`);
        }

        const app         = new App(app_id);
        const app_dir     = path.join(this._base_dir, app.app_id);
        const scripts_dir = path.join(app_dir, 'scripts');
        const build_dir   = path.join(app_dir, 'build');

        /** @var {Object} app_data.appbuild */
        const app_data = vdf.parse(fs.readFileSync(path.join(scripts_dir, `app_build_${app_id}.vdf`)));
        if (typeof app_data.appbuild === 'undefined') {
            throw new Error('Corrupted App');
        }

        const depots = app_data.appbuild.depots;
        delete app_data.appbuild['depots'];

        Object.keys(app_data.appbuild).forEach((key) => {
            const prop = `${decamelize(key)}`;

            try {
                app[prop] = app_data.appbuild[key];
            } catch (e) {
            }
        });

        Object.keys(depots).forEach((depot_id) => {
            const depot = new Depot(depot_id);

            /** @var {Object} depot_data.DepotBuildConfig */
            const depot_data = vdf.parse(fs.readFileSync(path.join(scripts_dir, `app_depot_${depot_id}.vdf`)));

            Object.keys(depot_data.DepotBuildConfig).forEach((key) => {
                const prop  = `_${decamelize(key)}`;
                depot[prop] = depot_data.DepotBuildConfig[key];
            });

            app.addDepot(depot);

        });

        return app;
    }

    /**
     * @param {App} app
     */
    save (app)
    {
        const app_dir     = path.join(this._base_dir, `${app.app_id}`);
        const scripts_dir = path.join(app_dir, 'scripts');
        const build_dir   = path.join(app_dir, 'build');
        const depot_dir   = path.join(app_dir, 'depots');

        this._mkdir(app_dir);
        this._mkdir(scripts_dir);
        this._mkdir(build_dir);
        this._mkdir(depot_dir);

        // ensure scripts directory is empty
        fs.readdirSync(scripts_dir).forEach(f => fs.unlinkSync(path.join(scripts_dir, f)));

        fs.writeFileSync(path.join(scripts_dir, `app_build_${app.app_id}.vdf`), app.toVDF());

        app.getDepots().forEach((depot) => {
            this._mkdir(path.join(depot_dir, `${depot.depot_id}`));
            fs.writeFileSync(path.join(scripts_dir, `app_depot_${depot.depot_id}.vdf`), depot.toVDF());
        });
    }

    _mkdir (path)
    {
        if (!fs.existsSync(path)) {
            fs.mkdirSync(path);
        }
    }

}

module.exports = AppRepository;